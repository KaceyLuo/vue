{"id":"component3.html","dependencies":[],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>pops父亲向儿子传递数据</title>\r\n</head>\r\n<body>\r\n    在父组件里向子组件传递消息\r\n    <div id=\"app\" style=\"border:2px solid green\">\r\n        <h5 style=\"text-align: center;\">我是父组件</h5>\r\n        v-bind使用与否的区别\r\n        <!--没绑定时 不会对msg进行数据类型识别 msg里面是什么就直接传什么\r\n        绑定后 会自动识别msg数据类型 msg内还可以使用布尔值、对象等-->\r\n        <child-component msg=\"[1,2,3]\"></child-component>\r\n        <child-component :msg=\"[1,2,3]\"></child-component>\r\n\r\n        <hr>\r\n        使用v-bind进行数据的动态绑定，把input中的msg传递给子组件\r\n        <input type=\"text\" v-model=\"parentmsg\">     \r\n        <bind-component :msg=\"parentmsg\"></bind-component>\r\n\r\n    </div>\r\n\r\n\r\n\r\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\r\n    <script>\r\n        //app相当于一个父组件 components相当于一个子组件\r\n        var app=new Vue({\r\n            el:\"#app\",\r\n            data:{\r\n                parentmsg:'今天是个好日子'\r\n            },\r\n            components:{\r\n                'child-component':{\r\n                    //与data的区别： props的内容来自于父级(app) 而data return的数据就是组件自己的数据 两种情况的作用域就是组件本身 可以在template、computed、methods中直接使用\r\n                    props:['msg'],\r\n                    template:'<div style=\"border:2px solid red\">{{msg.length}}</div>'\r\n                },\r\n                'bind-component':{\r\n                    props:['msg'],\r\n                    template:'<div style=\"border:2px solid blue\">{{msg}}</div>'\r\n                }\r\n            }\r\n        })\r\n    </script>\r\n</body>\r\n</html>"},"hash":"7ef6657986b57c1c5fed7f4a5e364a60","cacheData":{}}